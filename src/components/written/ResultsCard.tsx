import React, { useRef } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Download, Share } from "lucide-react";
import { WrittenPaper, WrittenProgress } from "@/data/writtenPapers";
import html2canvas from "html2canvas";

interface ResultsCardProps {
  paper: WrittenPaper;
  progress: WrittenProgress;
}

export const ResultsCard: React.FC<ResultsCardProps> = ({
  paper,
  progress,
}) => {
  const cardRef = useRef<HTMLDivElement>(null);

  const getGrade = (score: number, total: number): string => {
    const percentage = (score / total) * 100;
    if (percentage >= 80) return "A*";
    if (percentage >= 70) return "A";
    if (percentage >= 60) return "B";
    if (percentage >= 50) return "C";
    if (percentage >= 40) return "D";
    return "U";
  };

  const getGradeColor = (grade: string) => {
    switch (grade) {
      case "A*":
      case "A":
        return "bg-green-100 text-green-800 border-green-200";
      case "B":
      case "C":
        return "bg-blue-100 text-blue-800 border-blue-200";
      case "D":
        return "bg-orange-100 text-orange-800 border-orange-200";
      default:
        return "bg-red-100 text-red-800 border-red-200";
    }
  };

  const totalScore = progress.totalMarksAwarded || 0;
  const percentage = Math.round((totalScore / paper.totalMarks) * 100);
  const grade = getGrade(totalScore, paper.totalMarks);

  const exportAsImage = async () => {
    if (!cardRef.current) return;

    try {
      const canvas = await html2canvas(cardRef.current, {
        backgroundColor: "#ffffff",
        scale: 2,
        useCORS: true,
      });

      const link = document.createElement("a");
      link.download = `${paper.year}-${paper.session}-results.png`;
      link.href = canvas.toDataURL();
      link.click();
    } catch (error) {
      console.error("Failed to export image:", error);
    }
  };

  return (
    <div className="space-y-4">
      <Card ref={cardRef} className="max-w-md mx-auto">
        <CardHeader className="text-center pb-4">
          <div className="bg-primary/10 rounded-full p-4 w-16 h-16 mx-auto mb-4 flex items-center justify-center">
            <span className="text-2xl">ðŸŽ“</span>
          </div>
          <CardTitle className="text-xl">Exam Results</CardTitle>
          <p className="text-muted-foreground">
            {paper.year}{" "}
            {paper.session.charAt(0).toUpperCase() + paper.session.slice(1)}{" "}
            Paper {paper.paperNumber}
          </p>
        </CardHeader>

        <CardContent className="space-y-6 text-center">
          <div className="space-y-2">
            <div
              className={`text-4xl font-bold px-4 py-2 rounded-lg border ${getGradeColor(
                grade
              )}`}
            >
              {grade}
            </div>
            <div className="text-2xl font-semibold">
              {totalScore}/{paper.totalMarks}
            </div>
            <div className="text-lg text-muted-foreground">{percentage}%</div>
          </div>

          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <div className="font-medium">Questions</div>
              <div className="text-muted-foreground">
                {paper.questions.length}
              </div>
            </div>
            <div>
              <div className="font-medium">Duration</div>
              <div className="text-muted-foreground">{paper.duration} min</div>
            </div>
            <div>
              <div className="font-medium">Subject</div>
              <div className="text-muted-foreground">{paper.subject}</div>
            </div>
            <div>
              <div className="font-medium">Date</div>
              <div className="text-muted-foreground">
                {new Date(progress.lastUpdated).toLocaleDateString()}
              </div>
            </div>
          </div>

          <div className="pt-4 border-t">
            <p className="text-xs text-muted-foreground">
              Generated by Biology Learning Platform
            </p>
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-center gap-2">
        <Button onClick={exportAsImage} variant="outline">
          <Download className="h-4 w-4 mr-2" />
          Export as Image
        </Button>
        <Button
          onClick={() =>
            navigator.share?.({
              title: `Exam Results - ${grade}`,
              text: `Scored ${totalScore}/${paper.totalMarks} (${percentage}%) in ${paper.year} ${paper.session} Paper`,
            })
          }
          variant="outline"
        >
          <Share className="h-4 w-4 mr-2" />
          Share
        </Button>
      </div>
    </div>
  );
};
